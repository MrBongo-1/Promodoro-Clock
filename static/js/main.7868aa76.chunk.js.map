{"version":3,"sources":["audio/Beep.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","timer","stringify","x","toString","join","Setting","props","state","source","beepSound","breakTime","sessionTime","currentSessionTime","minFormat","secLeft","secFormat","countStatus","sessionStatus","resetTimer","bind","startAndStop","biggerBreak","smallerBreak","biggerSession","smallerSession","this","setInterval","min","setState","sec","document","getElementById","play","clearInterval","playSound","pause","currentTime","symbol","className","className2","id","onClick","src","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7868aa76.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Beep.b01f0978.mp3\";","import React from 'react';\nimport './App.css';\n//Audio file imported\nimport beepSound from './audio/Beep.mp3';\n\nlet timer = '';\n//The stringify function turn numbers under 10 into strings but with an extra 0 in front.\nfunction stringify(x) {\n  let string = '';\n  if(x < 10) {\n    string = ['0', x.toString()].join('');\n\n    return string;\n  } else {\n    string = x.toString();\n\n    return string;\n  }\n}\n\nclass Setting extends React.Component {\n  constructor(props) {\n    super(props);\n    /*breakTime holds the duration of the break in minutes.\n    sessionTime holds the duration of the session in minutes.\n    currentSessionTime holds the integer corresponding to the current number of minutes left.\n    minFormat contains a formatted string (Ex. 9 -> '09') displaying how many minutes are left.\n    secLeft holds the integer corresponding to the current number of seconds left.\n    secFormat contains a formatted string (Ex. 52 -> '52') displaying how many seconds are left.\n    countStatus denotes if the timer is paused or playing.\n    sessionStatus describes which mode the timer is in. (Session mode or break mode)*/\n    this.state = {\n      source: beepSound,\n      breakTime: 5,\n      sessionTime: 25,\n      currentSessionTime: 25,\n      minFormat:'25',\n      secLeft:0,\n      secFormat:'00',\n      countStatus:'Paused',\n      sessionStatus:'Session'\n    };\n    this.resetTimer = this.resetTimer.bind(this);\n    this.startAndStop = this.startAndStop.bind(this);\n    this.biggerBreak = this.biggerBreak.bind(this);\n    this.smallerBreak = this.smallerBreak.bind(this);\n    this.biggerSession = this.biggerSession.bind(this);\n    this.smallerSession = this.smallerSession.bind(this);\n  }\n  /*When you click on the Play/Pause button, if countStatus is set to 'Paused',\n  the timer variable is assigned to the myTimer function which executes every second (1000ms) and the countStatus is set to 'Playing'.\n  If countStatus is set to 'Playing' when clicking on the Play/Pause button, the myTimer function is stopped and the interval cleared.\n  countStatus will then be set to 'Paused'.*/\n  startAndStop() {\n    if(this.state.countStatus === 'Paused') {\n      timer = setInterval(function myTimer() {\n        //The myTimer function first checks which mode the timer is in (Session mode or break mode).\n        if(this.state.sessionStatus === 'Session') {\n          /*When secLeft is equal to 0 but there is still at least a minute left,\n          secLeft will be set to 59 and the currentSessionTime counter will be reduced by 1.\n          (Respectively, secFormat and minFormat will both be set to the stringified values of secLeft and currentSessionTime)*/\n          if(this.state.currentSessionTime > 0 && this.state.secLeft == 0) {\n            let min = this.state.currentSessionTime - 1;\n\n            let sec = 59;\n\n            this.setState({\n              currentSessionTime: min,\n              secLeft: sec,\n              minFormat: stringify(min),\n              secFormat: stringify(sec)\n            });\n          //When secLeft will be higher than 0, secLeft will be reduced by 1.\n          } else if(this.state.secLeft > 0) {\n            let sec = this.state.secLeft - 1;\n\n            this.setState({\n              secLeft: sec,\n              secFormat: stringify(sec)\n            });\n          /*Finally, when both secLeft and currentSessionTime is equal to 0,\n          currentSessionTime will now be set to the value in breakTime if sessionStatus is in session mode and vice-versa.\n          Also, the audio element will play a beeping sound.*/\n          } else {\n            let min = this.state.breakTime;\n\n            let playSound = document.getElementById('beep');\n\n            playSound.play();\n\n            this.setState({\n              currentSessionTime: min,\n              minFormat: stringify(min),\n              sessionStatus: 'Break'\n            });\n          }\n        } else if(this.state.sessionStatus === 'Break') {\n          if(this.state.currentSessionTime > 0 && this.state.secLeft == 0) {\n            let min = this.state.currentSessionTime - 1;\n\n            let sec = 59;\n\n            this.setState({\n              currentSessionTime: min,\n              secLeft: sec,\n              minFormat: stringify(min),\n              secFormat: stringify(sec)\n            });\n          } else if(this.state.secLeft > 0) {\n            let sec = this.state.secLeft - 1;\n\n            this.setState({\n              secLeft: sec,\n              secFormat: stringify(sec)\n            });\n          } else {\n            let min = this.state.sessionTime;\n\n            let playSound = document.getElementById('beep');\n\n            playSound.play();\n\n            this.setState({\n              currentSessionTime: min,\n              minFormat: stringify(min),\n              sessionStatus: 'Session'\n            });\n          }\n        }\n      }.bind(this), 1000);\n      this.setState({\n        countStatus: 'Playing'\n      });\n    } else if(this.state.countStatus === 'Playing') {\n      clearInterval(timer);\n\n      this.setState({\n        countStatus: 'Paused'\n      });\n    }\n  }\n  /*When the reset button is clicked, myTimer function is stopped and cleared, any alarm sound is stopped and reinitialized and finally,\n  all states are reset to their default values*/\n  resetTimer() {\n    clearInterval(timer);\n\n    let playSound = document.getElementById('beep');\n\n    playSound.pause();\n\n    playSound.currentTime = 0;\n\n    this.setState({\n      breakTime:5,\n      sessionTime:25,\n      currentSessionTime: 25,\n      minFormat:'25',\n      secLeft:0,\n      secFormat:'00',\n      countStatus:'Paused',\n      sessionStatus:'Session'\n    });\n  }\n  /*When the break-increment button is clicked, the breakTime value is increased by 1 until it reaches 60*/\n  biggerBreak() {\n    clearInterval(timer);\n    if(this.state.breakTime < 60) {\n      let min = this.state.breakTime + 1;\n      if(this.state.sessionStatus === 'Break') {\n        this.setState({\n          breakTime: min,\n          currentSessionTime: min,\n          secLeft: 0,\n          minFormat: stringify(min),\n          secFormat: '00',\n          countStatus: 'Paused'\n        });\n      } else {\n        this.setState({\n          breakTime: min,\n          countStatus: 'Paused'\n        });\n      }\n    } else {\n      this.setState({\n        currentSessionTime: 60,\n        secLeft: 0,\n        minFormat: '60',\n        secFormat: '00',\n        countStatus: 'Paused'\n      });\n    }\n  }\n  /*When the break-decrement button is clicked, the breakTime value is decreased by 1 until it reaches 1*/\n  smallerBreak() {\n    clearInterval(timer);\n    if(this.state.breakTime > 1) {\n      let min = this.state.breakTime - 1;\n      if(this.state.sessionStatus === 'Break') {\n        this.setState({\n          breakTime: min,\n          currentSessionTime: min,\n          secLeft: 0,\n          minFormat: stringify(min),\n          secFormat: '00',\n          countStatus: 'Paused'\n        });\n      } else {\n        this.setState({\n          breakTime: min,\n          countStatus: 'Paused'\n        });\n      }\n    } else {\n      this.setState({\n        countStatus: 'Paused'\n      });\n    }\n  }\n  /*When the session-increment button is clicked, the sessionTime value is increased by 1 until it reaches 60*/\n  biggerSession() {\n    clearInterval(timer);\n    if(this.state.sessionTime < 60) {\n      let min = this.state.sessionTime + 1;\n      if(this.state.sessionStatus === 'Session') {\n        this.setState({\n          sessionTime: min,\n          currentSessionTime: min,\n          secLeft: 0,\n          minFormat: stringify(min),\n          secFormat: '00',\n          countStatus: 'Paused'\n        });\n      } else {\n        this.setState({\n          sessionTime: min,\n          countStatus: 'Paused'\n        });\n      }\n    } else {\n      this.setState({\n        currentSessionTime: 60,\n        secLeft: 0,\n        minFormat: '60',\n        secFormat: '00',\n        countStatus: 'Paused'\n      });\n    }\n  }\n  /*When the session-decrement button is clicked, the sessionTime value is decreased by 1 until it reaches 1*/\n  smallerSession() {\n    clearInterval(timer);\n    if(this.state.sessionTime > 1) {\n      let min = this.state.sessionTime - 1;\n      if(this.state.sessionStatus === 'Session') {\n        this.setState({\n          sessionTime: min,\n          currentSessionTime: min,\n          secLeft: 0,\n          minFormat: stringify(min),\n          secFormat: '00',\n          countStatus: 'Paused'\n        });\n      } else {\n        this.setState({\n          sessionTime: min,\n          countStatus: 'Paused'\n        });\n      }\n    } else {\n      this.setState({\n        countStatus: 'Paused'\n      });\n    }\n  }\n\n  render() {\n    let symbol = '';\n\n    let className = '';\n\n    let className2 = '';\n    //Changes the pause/play symbol according to the count status\n    if (this.state.countStatus === \"Paused\") {\n      symbol = '►';\n      className2 = 'bigPlay';\n    } else {\n      symbol = '▐ ▌';\n      className2 = 'redPause';\n    }\n    //Sets a class when the timer hits 01:00. That class will be styled to flash red\n    if (this.state.currentSessionTime === 0 && this.state.secLeft <= 59 && this.state.countStatus === 'Playing') {\n      className = 'flashing';\n    } else if (this.state.currentSessionTime === 0 && this.state.secLeft <= 59) {\n      className = 'red';\n    } else {\n      className = '';\n    }\n\n    return (\n      <div>\n        <div id=\"container-one\">\n          <p id=\"break-label\">Break length (min)\n          </p>\n\n          <p id=\"session-label\">Session length (min)\n          </p>\n        </div>\n\n        <div id=\"container-two\">\n          <p id=\"break-length\">{this.state.breakTime}\n          </p>\n\n          <p id=\"session-length\">{this.state.sessionTime}\n          </p>\n        </div>\n\n        <div id=\"container-three\">\n          <div>\n          <button id=\"break-increment\" className='btn increase' onClick={this.biggerBreak}>▲ Break\n          </button>\n\n          <button id=\"break-decrement\" className='btn decrease' onClick={this.smallerBreak}>▼ Break\n          </button>\n          </div>\n\n          <div>\n          <button id=\"session-increment\" className='btn increase' onClick={this.biggerSession}>▲ Session\n          </button>\n\n          <button id=\"session-decrement\" className='btn decrease' onClick={this.smallerSession}>▼ Session\n          </button>\n          </div>\n        </div>\n\n        <p id=\"timer-label\">{this.state.sessionStatus}\n        </p>\n\n        <p id=\"time-left\" className={className}>{this.state.minFormat}:{this.state.secFormat}\n        </p>\n\n        <audio src={this.state.source} id='beep' />\n\n        <button id=\"start_stop\" className={className2} onClick={this.startAndStop}>{symbol}\n        </button>\n\n        <button id=\"reset\" onClick={this.resetTimer}>Reset\n        </button>\n\n        <p id=\"status\">{this.state.countStatus}\n        </p>\n      </div>\n    );\n  }\n}\nexport default Setting;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Setting from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Setting />\n  </React.StrictMode>,\n  document.getElementById('clock')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}