{"version":3,"sources":["audio/Beep.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","timer","stringify","x","toString","join","Setting","props","state","source","beepSound","breakTime","sessionTime","currentSessionTime","minFormat","secLeft","secFormat","countStatus","sessionStatus","resetTimer","bind","startAndStop","biggerBreak","smallerBreak","biggerSession","smallerSession","this","setInterval","min","setState","sec","document","getElementById","play","clearInterval","playSound","pause","currentTime","id","onClick","src","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.98f2579b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Beep.b01f0978.mp3\";","import React from 'react';\nimport './App.css';\nimport beepSound from './audio/Beep.mp3'\n\nlet timer = '';\n\nfunction stringify(x) {\n  let string = '';\n  if(x < 10) {\n    string = ['0', x.toString()].join('');\n    return string;\n  } else {\n    string = x.toString();\n    return string;\n  }\n}\n\nclass Setting extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      source: beepSound,\n      breakTime: 5,\n      sessionTime: 25,\n      currentSessionTime: 25,\n      minFormat:'25',\n      secLeft:0,\n      secFormat:'00',\n      countStatus:'Paused',\n      sessionStatus:'Session'\n    };\n    this.resetTimer = this.resetTimer.bind(this);\n    this.startAndStop = this.startAndStop.bind(this);\n    this.biggerBreak = this.biggerBreak.bind(this);\n    this.smallerBreak = this.smallerBreak.bind(this);\n    this.biggerSession = this.biggerSession.bind(this);\n    this.smallerSession = this.smallerSession.bind(this);\n  }\n\n  startAndStop() {\n    if(this.state.countStatus === 'Paused') {\n      timer = setInterval(function myTimer() {\n        if(this.state.sessionStatus === 'Session') {\n          if(this.state.currentSessionTime > 0 && this.state.secLeft == 0) {\n            let min = this.state.currentSessionTime - 1;\n            let sec = 59;\n            this.setState({\n              currentSessionTime: min,\n              secLeft: sec,\n              minFormat: stringify(min),\n              secFormat: stringify(sec)\n            });\n          } else if(this.state.secLeft > 0) {\n            let sec = this.state.secLeft - 1;\n            this.setState({\n              secLeft: sec,\n              secFormat: stringify(sec)\n            });\n          } else {\n            let min = this.state.breakTime;\n            let playSound = document.getElementById('beep');\n            playSound.play();\n            this.setState({\n              currentSessionTime: min,\n              minFormat: stringify(min),\n              sessionStatus: 'Break'\n            });\n          }\n        } else if(this.state.sessionStatus === 'Break') {\n          if(this.state.currentSessionTime > 0 && this.state.secLeft == 0) {\n            let min = this.state.currentSessionTime - 1;\n            let sec = 59;\n            this.setState({\n              currentSessionTime: min,\n              secLeft: sec,\n              minFormat: stringify(min),\n              secFormat: stringify(sec)\n            });\n          } else if(this.state.secLeft > 0) {\n            let sec = this.state.secLeft - 1;\n            this.setState({\n              secLeft: sec,\n              secFormat: stringify(sec)\n            });\n          } else {\n            let min = this.state.sessionTime;\n            let playSound = document.getElementById('beep');\n            playSound.play();\n            this.setState({\n              currentSessionTime: min,\n              minFormat: stringify(min),\n              sessionStatus: 'Session'\n            });\n          }\n        }\n      }.bind(this), 1000);\n      this.setState({\n        countStatus: 'Play'\n      });\n    } else if(this.state.countStatus === 'Play') {\n      clearInterval(timer);\n      this.setState({\n        countStatus: 'Paused'\n      });\n    }\n  }\n\n  resetTimer() {\n    clearInterval(timer);\n    let playSound = document.getElementById('beep');\n    playSound.pause();\n    playSound.currentTime = 0;\n    this.setState({\n      breakTime:5,\n      sessionTime:25,\n      currentSessionTime: 25,\n      minFormat:'25',\n      secLeft:0,\n      secFormat:'00',\n      countStatus:'Paused',\n      sessionStatus:'Session'\n    });\n  }\n\n  biggerBreak() {\n    clearInterval(timer);\n    if(this.state.breakTime < 60) {\n      let min = this.state.breakTime + 1;\n      if(this.state.sessionStatus === 'Break') {\n        this.setState({\n          breakTime: min,\n          currentSessionTime: min,\n          secLeft: 0,\n          minFormat: stringify(min),\n          secFormat: '00',\n          countStatus: 'Paused'\n        });\n      } else {\n        this.setState({\n          breakTime: min,\n          countStatus: 'Paused'\n        });\n      }\n    } else {\n      this.setState({\n        currentSessionTime: 60,\n        secLeft: 0,\n        minFormat: '60',\n        secFormat: '00',\n        countStatus: 'Paused'\n      });\n    }\n  }\n\n  smallerBreak() {\n    clearInterval(timer);\n    if(this.state.breakTime > 1) {\n      let min = this.state.breakTime - 1;\n      if(this.state.sessionStatus === 'Break') {\n        this.setState({\n          breakTime: min,\n          currentSessionTime: min,\n          secLeft: 0,\n          minFormat: stringify(min),\n          secFormat: '00',\n          countStatus: 'Paused'\n        });\n      } else {\n        this.setState({\n          breakTime: min,\n          countStatus: 'Paused'\n        });\n      }\n    } else {\n      this.setState({\n        countStatus: 'Paused'\n      });\n    }\n  }\n\n  biggerSession() {\n    clearInterval(timer);\n    if(this.state.sessionTime < 60) {\n      let min = this.state.sessionTime + 1;\n      if(this.state.sessionStatus === 'Session') {\n        this.setState({\n          sessionTime: min,\n          currentSessionTime: min,\n          secLeft: 0,\n          minFormat: stringify(min),\n          secFormat: '00',\n          countStatus: 'Paused'\n        });\n      } else {\n        this.setState({\n          sessionTime: min,\n          countStatus: 'Paused'\n        });\n      }\n    } else {\n      this.setState({\n        currentSessionTime: 60,\n        secLeft: 0,\n        minFormat: '60',\n        secFormat: '00',\n        countStatus: 'Paused'\n      });\n    }\n  }\n\n  smallerSession() {\n    clearInterval(timer);\n    if(this.state.sessionTime > 1) {\n      let min = this.state.sessionTime - 1;\n      if(this.state.sessionStatus === 'Session') {\n        this.setState({\n          sessionTime: min,\n          currentSessionTime: min,\n          secLeft: 0,\n          minFormat: stringify(min),\n          secFormat: '00',\n          countStatus: 'Paused'\n        });\n      } else {\n        this.setState({\n          sessionTime: min,\n          countStatus: 'Paused'\n        });\n      }\n    } else {\n      this.setState({\n        countStatus: 'Paused'\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <p id=\"break-label\">Break length (min)\n        </p>\n\n        <p id=\"session-label\">Session length (min)\n        </p>\n\n        <p id=\"break-length\">{this.state.breakTime}\n        </p>\n\n        <p id=\"session-length\">{this.state.sessionTime}\n        </p>\n\n        <button id=\"break-increment\" onClick={this.biggerBreak}>B\n        </button>\n\n        <button id=\"break-decrement\" onClick={this.smallerBreak}>b\n        </button>\n\n        <button id=\"session-increment\" onClick={this.biggerSession}>S\n        </button>\n\n        <button id=\"session-decrement\" onClick={this.smallerSession}>s\n        </button>\n\n        <p id=\"timer-label\">{this.state.sessionStatus}\n        </p>\n\n        <p id=\"time-left\">{this.state.minFormat}:{this.state.secFormat}\n        </p>\n\n        <audio src={this.state.source} id='beep' />\n\n        <button id=\"start_stop\" onClick={this.startAndStop}>||\n        </button>\n\n        <button id=\"reset\" onClick={this.resetTimer}>X\n        </button>\n\n        <p>{this.state.countStatus}\n        </p>\n      </div>\n    );\n  }\n}\nexport default Setting;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Setting from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Setting />\n  </React.StrictMode>,\n  document.getElementById('clock')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}